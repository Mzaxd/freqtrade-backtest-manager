generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Strategy {
  id            Int            @id @default(autoincrement())
  filename      String         @unique
  className     String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  backtestTasks BacktestTask[]
}

model Config {
  id            Int            @id @default(autoincrement())
  name          String
  filename      String?        @unique
  description   String?
  data          Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  backtests     BacktestTask[]

  @@unique([name])
}

model BacktestTask {
  id             String    @id @default(cuid())
  name           String
  status         String
  timerangeStart DateTime?
  timerangeEnd   DateTime?
  createdAt      DateTime  @default(now())
  completedAt    DateTime?
  resultsSummary Json?
  rawOutputPath  String?
  logs           String?
  strategyId     Int
  configId       Int?
  config         Config?   @relation(fields: [configId], references: [id])
  strategy       Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}

model MarketData {
  id         Int      @id @default(autoincrement())
  exchange   String
  pair       String
  timeframe  String
  startTime  DateTime?
  endTime    DateTime?
  marketType String   @default("spot")
  status     String   @default("available") // available, downloading, failed
  filePath   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([exchange, pair, timeframe, marketType])
}

model DataDownloadJob {
  id         String   @id @default(cuid())
  exchange   String
  pairs      String[]
  timeframes String[]
  marketType     String    @default("spot")
  timerangeStart DateTime?
  timerangeEnd   DateTime?
  status         String    // pending, running, completed, failed
  logs           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
