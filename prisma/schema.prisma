generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Strategy {
  id            Int            @id @default(autoincrement())
  filename      String         @unique
  className     String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  backtestTasks BacktestTask[]
}

model Config {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  data        Json
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  filename    String?        @unique
  backtests   BacktestTask[]
}

model BacktestTask {
  id             String    @id @default(cuid())
  name           String
  status         String
  timerangeStart DateTime?
  timerangeEnd   DateTime?
  createdAt      DateTime  @default(now())
  completedAt    DateTime?
  resultsSummary Json?
  rawOutputPath  String?
  logs           String?
  strategyId     Int
  configId       Int?
  config         Config?   @relation(fields: [configId], references: [id])
  strategy       Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}

model MarketData {
  id         Int       @id @default(autoincrement())
  exchange   String
  pair       String
  timeframe  String
  marketType String    @default("spot")
  status     String    @default("available")
  filePath   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  endTime    DateTime?
  startTime  DateTime?

  @@unique([exchange, pair, timeframe, marketType])
}

model DataDownloadJob {
  id             String    @id @default(cuid())
  exchange       String
  pairs          String[]
  timeframes     String[]
  marketType     String    @default("spot")
  status         String
  logs           String?
  format         String    @default("feather")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  timerangeEnd   DateTime?
  timerangeStart DateTime?
}
